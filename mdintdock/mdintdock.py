import os
import argparse
from mdprep import FrameWriter
import MDAnalysis as mda
from smina_runner import SminaRunner

def main(args):
    # Check if topology_file is provided
    if args.t is None:
        print("Error: Topology file is missing.")
        return
    if args.d is None:
        print("Error: Trajectory file is missing.")
        return
    if args.l is None:
        print("Error: Ligand Name is missing.")
        return

    # Create an instance of FrameWriter with the input parameters
    frame_writer = FrameWriter(
        topology_file=args.t,
        trajectory_file=args.d,
        lig_resname=args.l,
    )

    # Get total number of frames in the trajectory
    u = mda.Universe(args.t, args.d)
    total_frames = len(u.trajectory)

    # Call the methods to write protein and ligand frames
    for frame_number in range(1, total_frames + 1):
        frame_writer.write_protein_frame(frame_number)
        frame_writer.write_ligand_frame(frame_number)

    # Get a list of frame files generated by FrameWriter
    frame_files = [
        os.path.join(frame_writer.protein_pdb_directory, f"frame_{frame_number}.pdb") for frame_number in range(1, total_frames + 1)
    ]

    # Get a list of ligand files generated by FrameWriter
    ligand_files = [
        os.path.join(frame_writer.refligand_sdf_directory, f"ligand_{ligand_number}.sdf") for ligand_number in range(1, total_frames + 1)
    ]

    # Create output directory if it doesn't exist
    if not os.path.exists("output"):
        os.makedirs("output")

    # Run reference docking for each ligand-frame pair
    for ligand_file, frame_file in zip(ligand_files, frame_files):
        # Instantiate SminaRunner with output directory and optional parameters
        smina_runner = SminaRunner(output_dir="output")
        
        # Run reference docking for the current ligand-frame pair
        smina_runner.run_ref_docking(receptor_file=frame_file, sdf_file=ligand_file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", type=str, help="Path to the topology file (e.g., prot_lig_top.pdb)")
    parser.add_argument("-d", type=str, help="Path to the trajectory file (e.g., first_50_frames_correct.dcd)")
    parser.add_argument("-l", type=str, default="UNK", help="Residue name of the ligand")
    args = parser.parse_args()

    main(args)


