import os
import argparse
import MDAnalysis as mda
import pandas as pd
from mdprep import FrameWriter
from smina_runner import SminaRunner
from analysis import process_poses
from rdkit import Chem

def main(args):
    # Check if required arguments are provided
    if args.topology_file is None or args.trajectory_file is None or args.lig_resname is None or args.sdf_file is None:
        print("Error: Required arguments are missing.")
        return

    # Create an instance of FrameWriter with the input parameters
    frame_writer = FrameWriter(
        topology_file=args.topology_file,
        trajectory_file=args.trajectory_file,
        lig_resname=args.lig_resname
    )

    # Get total number of frames in the trajectory
    u = mda.Universe(args.topology_file, args.trajectory_file)
    total_frames = len(u.trajectory)

    # Write protein and ligand frames for each frame in the trajectory
    frame_writer.write_frames()

    # Get ligands from the SDF file and write each ligand to a separate file
    ligand_output_dir = "ligands"
    os.makedirs(ligand_output_dir, exist_ok=True)
    smina_runner = SminaRunner()
    sdf_file = args.sdf_file
    print(args.sdf_file)
    print(ligand_output_dir)
    # Read ligands from the SDF file and write each ligand to a separate file
    smina_runner = SminaRunner()  # Instantiate SminaRunner
    ligands = smina_runner._read_sdf_ligands(sdf_file=args.sdf_file, output_dir=ligand_output_dir)

    # Get a list of frame files generated by FrameWriter
    frame_files = [
        os.path.join(frame_writer.protein_pdb_directory, f"frame_{frame_number}.pdb") for frame_number in range(1, total_frames + 1)
    ]

    # Get a list of ligand files generated by FrameWriter
    ligand_files = [
        os.path.join(frame_writer.refligand_sdf_directory, f"ligand_{ligand_number}.sdf") for ligand_number in range(1, total_frames + 1)
    ]

    print("start analysis of protein-ligand complex")
    # Initialize an empty list to store DataFrames
    dfs = []
    
    # Your existing code to iterate over frames and ligands
    for frame_number, (frame_file, ligand_file) in enumerate(zip(frame_files, ligand_files), start=1):
        df = process_poses(frame_file, ligand_file, "01_ref_ligand_md")
        dfs.append(df)

    # Concatenate all DataFrames into a single DataFrame
    protein_md_df = pd.concat(dfs)

    # Write the combined DataFrame to a CSV file
    combined_output_filename = "protein_ligand_interactions.csv"
    protein_md_df.to_csv(combined_output_filename, index=False)
    print(f"Combined output written to {combined_output_filename}") 
    

    # If ligands extracted successfully, proceed with docking
    if ligands:
        # Get a list of frame files generated by FrameWriter
        frame_files = [
            os.path.join(frame_writer.protein_pdb_directory, f"frame_{frame_number}.pdb") for frame_number in range(1, total_frames + 1)
        ]

        # Get a list of ligand files generated by FrameWriter
        ligand_files = [
            os.path.join(frame_writer.refligand_sdf_directory, f"ligand_{ligand_number}.sdf") for ligand_number in range(1, total_frames + 1)
        ]

        # Create output directory for docking results
        docking_output_dir = "docking_output"
        os.makedirs(docking_output_dir, exist_ok=True)

        # Initialize an empty list to store DataFrames
        lig_dfs = []

        # Run docking for each ligand-frame pair
        smina_runner = SminaRunner(output_dir=docking_output_dir)
        for ligand_name, ligand_file in ligands.items():
            for frame_file in frame_files:
                frame_number = int(os.path.basename(frame_file).split("_")[1].split(".")[0])  # Extract frame number
                reference_ligand_file = ligand_files[frame_number-1]  # Get corresponding reference ligand file
                # Run docking for the ligand-frame pair
                smina_runner.run_docking(receptor_file=frame_file, sdf_file=ligand_file, ligand_name=ligand_name, ligand_output_dir=ligand_output_dir, reference_ligand=reference_ligand_file)
                
                # Process the poses for the ligand-frame pair
                lig_docking_result_file = os.path.join(f"docking_output/docking_{ligand_name}", f"{ligand_name}_frame_{frame_number}.sdf")
                lig_df = process_poses(frame_file, lig_docking_result_file, ligand_name)
                lig_dfs.append(lig_df)  # Append the DataFrame to the list
	
        # Concatenate all DataFrames into a single DataFrame
        combined_lig_df = pd.concat(lig_dfs)

        # Write the combined DataFrame to a CSV file
        combined_output_filename = "ligand_frame_docking_results.csv"
        combined_lig_df.to_csv(combined_output_filename, index=False)
        print(f"Docking results written to {combined_output_filename}")

         
    # Get a list of frame files generated by FrameWriter
    frame_files = [
        os.path.join(frame_writer.protein_pdb_directory, f"frame_{frame_number}.pdb") for frame_number in range(1, total_frames + 1)
    ]

    # Get a list of ligand files generated by FrameWriter
    ligand_files = [
        os.path.join(frame_writer.refligand_sdf_directory, f"ligand_{ligand_number}.sdf") for ligand_number in range(1, total_frames + 1)
    ]

    # Create output directory if it doesn't exist
    if not os.path.exists("reference_docking"):
        os.makedirs("reference_docking")

    # Run reference docking for each ligand-frame pair
    for ligand_file, frame_file in zip(ligand_files, frame_files):
        # Instantiate SminaRunner with output directory and optional parameters
        smina_runner = SminaRunner(output_dir="reference_docking")
        
        # Run reference docking for the current ligand-frame pair
        smina_runner.run_ref_docking(receptor_file=frame_file, sdf_file=ligand_file)
        

    # Initialize an empty list to store DataFrames for reference docking results
    ref_docking_dfs = []

    # Loop through frame files and reference ligand files simultaneously
    for frame_file, ligand_file in zip(frame_files, ligand_files):
        # Get ligand number from the ligand file name
        ligand_number = int(os.path.basename(ligand_file).split("_")[1].split(".")[0])
        # Define output file for reference docking result
        ref_docking_result_file = os.path.join("reference_docking/ref_docking", f"lig_{ligand_number}_ref_dock.sdf")
        # Process reference docking result
        df = process_poses(frame_file, ref_docking_result_file, "02_ref_docking")
        # Append DataFrame to list of DataFrames for reference docking results
        ref_docking_dfs.append(df)

    # Concatenate all DataFrames into a single DataFrame for reference docking results
    ref_docking_combined_df = pd.concat(ref_docking_dfs)

    # Write combined DataFrame for reference docking results to CSV file
    ref_docking_combined_output_filename = "reference_docking_results.csv"
    ref_docking_combined_df.to_csv(ref_docking_combined_output_filename, index=False)
    print(f"Reference docking results written to {ref_docking_combined_output_filename}")

    all_int_df = pd.concat([combined_lig_df, protein_md_df, ref_docking_combined_df])

    # Write the combined DataFrame to a new CSV file
    all_int_df.to_csv("all_analysis_data.csv", index=False)
    
    # Create a new column called "index" to be used as the index
    all_int_df.insert(0, "index", all_int_df.index)
    
    # Set the "index" column as the index
    all_int_df.set_index("index", inplace=True)
    
    sorted_df = all_int_df.sort_values(by=["Frame", "ligand"])

    # Write the sorted DataFrame to a new CSV file
    sorted_df.to_csv("sorted_combined_results.csv", index=False)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--topology_file", type=str, help="Path to the topology file")
    parser.add_argument("-d", "--trajectory_file", type=str, help="Path to the trajectory file")
    parser.add_argument("-n", "--lig_resname", type=str, help="Residue name of the ligand")
    parser.add_argument("-l", "--sdf_file", type=str, help="Path to the SDF file containing ligands")
    args = parser.parse_args()

    main(args)
