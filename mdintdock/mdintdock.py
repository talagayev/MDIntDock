import os
import argparse
import MDAnalysis as mda
from mdprep import FrameWriter
from smina_runner import SminaRunner
from rdkit import Chem

def main(args):
    # Check if required arguments are provided
    if args.topology_file is None or args.trajectory_file is None or args.lig_resname is None or args.sdf_file is None:
        print("Error: Required arguments are missing.")
        return

    # Create an instance of FrameWriter with the input parameters
    frame_writer = FrameWriter(
        topology_file=args.topology_file,
        trajectory_file=args.trajectory_file,
        lig_resname=args.lig_resname
    )

    # Get total number of frames in the trajectory
    u = mda.Universe(args.topology_file, args.trajectory_file)
    total_frames = len(u.trajectory)

    # Call the methods to write protein and ligand frames
    for frame_number in range(1, total_frames + 1):
        frame_writer.write_protein_frame(frame_number)
        frame_writer.write_ligand_frame(frame_number)

    # Get ligands from the SDF file and write each ligand to a separate file
    ligand_output_dir = "ligands"
    os.makedirs(ligand_output_dir, exist_ok=True)
    smina_runner = SminaRunner()
    sdf_file = args.sdf_file
    print(args.sdf_file)
    print(ligand_output_dir)
    # Read ligands from the SDF file and write each ligand to a separate file
    smina_runner = SminaRunner()  # Instantiate SminaRunner
    ligands = smina_runner._read_sdf_ligands(sdf_file=args.sdf_file, output_dir=ligand_output_dir)
    

    # If ligands extracted successfully, proceed with docking
    if ligands:
        # Get a list of frame files generated by FrameWriter
        frame_files = [
            os.path.join(frame_writer.protein_pdb_directory, f"frame_{frame_number}.pdb") for frame_number in range(1, total_frames + 1)
        ]

        # Get a list of ligand files generated by FrameWriter
        ligand_files = [
            os.path.join(frame_writer.refligand_sdf_directory, f"ligand_{ligand_number}.sdf") for ligand_number in range(1, total_frames + 1)
        ]

        # Create output directory for docking results
        docking_output_dir = "docking_output"
        os.makedirs(docking_output_dir, exist_ok=True)

        # Run docking for each ligand-frame pair
        smina_runner = SminaRunner(output_dir=docking_output_dir)
        for ligand_name, ligand_file in ligands.items():
            for frame_file in frame_files:
                frame_number = int(os.path.basename(frame_file).split("_")[1].split(".")[0])  # Extract frame number
                print(frame_number)
                reference_ligand_file = ligand_files[frame_number-1]  # Get corresponding reference ligand file
                print(reference_ligand_file)
                smina_runner.run_docking(receptor_file=frame_file, sdf_file=ligand_file, ligand_name=ligand_name, ligand_output_dir=ligand_output_dir, reference_ligand=reference_ligand_file)




    # Get a list of frame files generated by FrameWriter
    frame_files = [
        os.path.join(frame_writer.protein_pdb_directory, f"frame_{frame_number}.pdb") for frame_number in range(1, total_frames + 1)
    ]

    # Get a list of ligand files generated by FrameWriter
    ligand_files = [
        os.path.join(frame_writer.refligand_sdf_directory, f"ligand_{ligand_number}.sdf") for ligand_number in range(1, total_frames + 1)
    ]

    # Create output directory if it doesn't exist
    if not os.path.exists("reference_docking"):
        os.makedirs("reference_docking")

    # Run reference docking for each ligand-frame pair
    for ligand_file, frame_file in zip(ligand_files, frame_files):
        # Instantiate SminaRunner with output directory and optional parameters
        smina_runner = SminaRunner(output_dir="reference_docking")
        
        # Run reference docking for the current ligand-frame pair
        smina_runner.run_ref_docking(receptor_file=frame_file, sdf_file=ligand_file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--topology_file", type=str, help="Path to the topology file")
    parser.add_argument("-d", "--trajectory_file", type=str, help="Path to the trajectory file")
    parser.add_argument("-n", "--lig_resname", type=str, help="Residue name of the ligand")
    parser.add_argument("-l", "--sdf_file", type=str, help="Path to the SDF file containing ligands")
    args = parser.parse_args()

    main(args)

